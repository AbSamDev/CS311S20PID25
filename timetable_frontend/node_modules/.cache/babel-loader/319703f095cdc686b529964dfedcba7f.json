{"ast":null,"code":"// Simple, stupid \"background\"/\"background-image\" value parser that just aims at exposing the image URLs\n\"use strict\";\n\nvar cssSupport = require('./cssSupport');\n\nvar trimCSSWhitespace = function (url) {\n  var whitespaceRegex = /^[\\t\\r\\f\\n ]*(.+?)[\\t\\r\\f\\n ]*$/;\n  return url.replace(whitespaceRegex, \"$1\");\n}; // TODO exporting this for the sake of unit testing. Should rather test the background value parser explicitly.\n\n\nexports.extractCssUrl = function (cssUrl) {\n  var urlRegex = /^url\\((\"[^\"]+\"|'[^']+'|[^\\)]+)\\)/,\n      quotedUrl;\n\n  if (!urlRegex.test(cssUrl)) {\n    throw new Error(\"Invalid url\");\n  }\n\n  quotedUrl = urlRegex.exec(cssUrl)[1];\n  return cssSupport.unquoteString(trimCSSWhitespace(quotedUrl));\n};\n\nvar sliceBackgroundDeclaration = function (backgroundDeclarationText) {\n  var functionParamRegexS = \"\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\(]+)\\\\s*\",\n      valueRegexS = \"(\" + \"url\\\\(\" + functionParamRegexS + \"\\\\)\" + \"|\" + \"[^,\\\\s]+\" + \")\",\n      simpleSingularBackgroundRegexS = \"(?:\\\\s*\" + valueRegexS + \")+\",\n      simpleBackgroundRegexS = \"^\\\\s*(\" + simpleSingularBackgroundRegexS + \")\" + \"(?:\\\\s*,\\\\s*(\" + simpleSingularBackgroundRegexS + \"))*\" + \"\\\\s*$\",\n      simpleSingularBackgroundRegex = new RegExp(simpleSingularBackgroundRegexS, \"g\"),\n      outerRepeatedMatch,\n      backgroundLayers = [],\n      getValues = function (singularBackgroundDeclaration) {\n    var valueRegex = new RegExp(valueRegexS, \"g\"),\n        backgroundValues = [],\n        repeatedMatch;\n    repeatedMatch = valueRegex.exec(singularBackgroundDeclaration);\n\n    while (repeatedMatch) {\n      backgroundValues.push(repeatedMatch[1]);\n      repeatedMatch = valueRegex.exec(singularBackgroundDeclaration);\n    }\n\n    return backgroundValues;\n  };\n\n  if (backgroundDeclarationText.match(new RegExp(simpleBackgroundRegexS))) {\n    outerRepeatedMatch = simpleSingularBackgroundRegex.exec(backgroundDeclarationText);\n\n    while (outerRepeatedMatch) {\n      backgroundLayers.push(getValues(outerRepeatedMatch[0]));\n      outerRepeatedMatch = simpleSingularBackgroundRegex.exec(backgroundDeclarationText);\n    }\n\n    return backgroundLayers;\n  }\n\n  return [];\n};\n\nvar findBackgroundImageUrlInValues = function (values) {\n  var i, url;\n\n  for (i = 0; i < values.length; i++) {\n    try {\n      url = exports.extractCssUrl(values[i]);\n      return {\n        url: url,\n        idx: i\n      };\n    } catch (e) {}\n  }\n};\n\nexports.parse = function (backgroundValue) {\n  var backgroundLayers = sliceBackgroundDeclaration(backgroundValue);\n  return backgroundLayers.map(function (backgroundLayerValues) {\n    var urlMatch = findBackgroundImageUrlInValues(backgroundLayerValues);\n\n    if (urlMatch) {\n      return {\n        preUrl: backgroundLayerValues.slice(0, urlMatch.idx),\n        url: urlMatch.url,\n        postUrl: backgroundLayerValues.slice(urlMatch.idx + 1)\n      };\n    } else {\n      return {\n        preUrl: backgroundLayerValues\n      };\n    }\n  });\n};\n\nexports.serialize = function (parsedBackground) {\n  var backgroundLayers = parsedBackground.map(function (backgroundLayer) {\n    var values = [].concat(backgroundLayer.preUrl);\n\n    if (backgroundLayer.url) {\n      values.push('url(\"' + backgroundLayer.url + '\")');\n    }\n\n    if (backgroundLayer.postUrl) {\n      values = values.concat(backgroundLayer.postUrl);\n    }\n\n    return values.join(' ');\n  });\n  return backgroundLayers.join(', ');\n};","map":{"version":3,"sources":["D:/act-back original/timetable_frontend/node_modules/inlineresources/src/backgroundValueParser.js"],"names":["cssSupport","require","trimCSSWhitespace","url","whitespaceRegex","replace","exports","extractCssUrl","cssUrl","urlRegex","quotedUrl","test","Error","exec","unquoteString","sliceBackgroundDeclaration","backgroundDeclarationText","functionParamRegexS","valueRegexS","simpleSingularBackgroundRegexS","simpleBackgroundRegexS","simpleSingularBackgroundRegex","RegExp","outerRepeatedMatch","backgroundLayers","getValues","singularBackgroundDeclaration","valueRegex","backgroundValues","repeatedMatch","push","match","findBackgroundImageUrlInValues","values","i","length","idx","e","parse","backgroundValue","map","backgroundLayerValues","urlMatch","preUrl","slice","postUrl","serialize","parsedBackground","backgroundLayer","concat","join"],"mappings":"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","sourcesContent":["// Simple, stupid \"background\"/\"background-image\" value parser that just aims at exposing the image URLs\n\"use strict\";\n\nvar cssSupport = require('./cssSupport');\n\n\nvar trimCSSWhitespace = function (url) {\n    var whitespaceRegex = /^[\\t\\r\\f\\n ]*(.+?)[\\t\\r\\f\\n ]*$/;\n\n    return url.replace(whitespaceRegex, \"$1\");\n};\n\n// TODO exporting this for the sake of unit testing. Should rather test the background value parser explicitly.\nexports.extractCssUrl = function (cssUrl) {\n    var urlRegex = /^url\\((\"[^\"]+\"|'[^']+'|[^\\)]+)\\)/,\n        quotedUrl;\n\n    if (!urlRegex.test(cssUrl)) {\n        throw new Error(\"Invalid url\");\n    }\n\n    quotedUrl = urlRegex.exec(cssUrl)[1];\n    return cssSupport.unquoteString(trimCSSWhitespace(quotedUrl));\n};\n\nvar sliceBackgroundDeclaration = function (backgroundDeclarationText) {\n    var functionParamRegexS = \"\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\(]+)\\\\s*\",\n        valueRegexS = \"(\" + \"url\\\\(\" + functionParamRegexS + \"\\\\)\" + \"|\" + \"[^,\\\\s]+\" + \")\",\n        simpleSingularBackgroundRegexS = \"(?:\\\\s*\" + valueRegexS + \")+\",\n        simpleBackgroundRegexS = \"^\\\\s*(\" + simpleSingularBackgroundRegexS + \")\" +\n                                  \"(?:\\\\s*,\\\\s*(\" + simpleSingularBackgroundRegexS + \"))*\" +\n                                  \"\\\\s*$\",\n        simpleSingularBackgroundRegex = new RegExp(simpleSingularBackgroundRegexS, \"g\"),\n        outerRepeatedMatch,\n        backgroundLayers = [],\n        getValues = function (singularBackgroundDeclaration) {\n            var valueRegex = new RegExp(valueRegexS, \"g\"),\n                backgroundValues = [],\n                repeatedMatch;\n\n            repeatedMatch = valueRegex.exec(singularBackgroundDeclaration);\n            while (repeatedMatch) {\n                backgroundValues.push(repeatedMatch[1]);\n                repeatedMatch = valueRegex.exec(singularBackgroundDeclaration);\n            }\n            return backgroundValues;\n        };\n\n    if (backgroundDeclarationText.match(new RegExp(simpleBackgroundRegexS))) {\n        outerRepeatedMatch = simpleSingularBackgroundRegex.exec(backgroundDeclarationText);\n        while (outerRepeatedMatch) {\n            backgroundLayers.push(getValues(outerRepeatedMatch[0]));\n            outerRepeatedMatch = simpleSingularBackgroundRegex.exec(backgroundDeclarationText);\n        }\n\n        return backgroundLayers;\n    }\n    return [];\n};\n\nvar findBackgroundImageUrlInValues = function (values) {\n    var i, url;\n\n    for(i = 0; i < values.length; i++) {\n        try {\n            url = exports.extractCssUrl(values[i]);\n            return {\n                url: url,\n                idx: i\n            };\n        } catch (e) {}\n    }\n};\n\nexports.parse = function (backgroundValue) {\n    var backgroundLayers = sliceBackgroundDeclaration(backgroundValue);\n\n    return backgroundLayers.map(function (backgroundLayerValues) {\n        var urlMatch = findBackgroundImageUrlInValues(backgroundLayerValues);\n\n        if (urlMatch) {\n            return {\n                preUrl: backgroundLayerValues.slice(0, urlMatch.idx),\n                url: urlMatch.url,\n                postUrl: backgroundLayerValues.slice(urlMatch.idx+1),\n            };\n        } else {\n            return {\n                preUrl: backgroundLayerValues\n            };\n        }\n    });\n};\n\nexports.serialize = function (parsedBackground) {\n    var backgroundLayers = parsedBackground.map(function (backgroundLayer) {\n        var values = [].concat(backgroundLayer.preUrl);\n\n        if (backgroundLayer.url) {\n            values.push('url(\"' + backgroundLayer.url + '\")');\n        }\n        if (backgroundLayer.postUrl) {\n            values = values.concat(backgroundLayer.postUrl);\n        }\n\n        return values.join(' ');\n    });\n\n    return backgroundLayers.join(', ');\n};\n"]},"metadata":{},"sourceType":"script"}