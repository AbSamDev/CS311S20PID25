{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.xmlserializer = factory();\n  }\n})(this, function () {\n  var removeInvalidCharacters = function (content) {\n    // See http://www.w3.org/TR/xml/#NT-Char for valid XML 1.0 characters\n    return content.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/g, '');\n  };\n\n  var serializeAttributeValue = function (value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n  };\n\n  var serializeTextContent = function (content) {\n    return content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  };\n\n  var serializeAttribute = function (attr) {\n    var value = attr.value;\n    return ' ' + attr.name + '=\"' + serializeAttributeValue(value) + '\"';\n  };\n\n  var getTagName = function (node) {\n    var tagName = node.tagName; // Aid in serializing of original HTML documents\n\n    if (node.namespaceURI === 'http://www.w3.org/1999/xhtml') {\n      tagName = tagName.toLowerCase();\n    }\n\n    return tagName;\n  };\n\n  var serializeNamespace = function (node, isRootNode) {\n    var nodeHasXmlnsAttr = Array.prototype.map.call(node.attributes || node.attrs, function (attr) {\n      return attr.name;\n    }).indexOf('xmlns') >= 0; // Serialize the namespace as an xmlns attribute whenever the element\n    // doesn't already have one and the inherited namespace does not match\n    // the element's namespace.\n\n    if (!nodeHasXmlnsAttr && (isRootNode || node.namespaceURI !== node.parentNode.namespaceURI)) {\n      return ' xmlns=\"' + node.namespaceURI + '\"';\n    } else {\n      return '';\n    }\n  };\n\n  var serializeChildren = function (node) {\n    return Array.prototype.map.call(node.childNodes, function (childNode) {\n      return nodeTreeToXHTML(childNode);\n    }).join('');\n  };\n\n  var serializeTag = function (node, isRootNode) {\n    var output = '<' + getTagName(node);\n    output += serializeNamespace(node, isRootNode);\n    Array.prototype.forEach.call(node.attributes || node.attrs, function (attr) {\n      output += serializeAttribute(attr);\n    });\n\n    if (node.childNodes.length > 0) {\n      output += '>';\n      output += serializeChildren(node);\n      output += '</' + getTagName(node) + '>';\n    } else {\n      output += '/>';\n    }\n\n    return output;\n  };\n\n  var serializeText = function (node) {\n    var text = node.nodeValue || node.value || '';\n    return serializeTextContent(text);\n  };\n\n  var serializeComment = function (node) {\n    return '<!--' + node.data.replace(/-/g, '&#45;') + '-->';\n  };\n\n  var serializeCDATA = function (node) {\n    return '<![CDATA[' + node.nodeValue + ']]>';\n  };\n\n  var nodeTreeToXHTML = function (node, options) {\n    var isRootNode = options && options.rootNode;\n\n    if (node.nodeName === '#document' || node.nodeName === '#document-fragment') {\n      return serializeChildren(node);\n    } else {\n      if (node.tagName) {\n        return serializeTag(node, isRootNode);\n      } else if (node.nodeName === '#text') {\n        return serializeText(node);\n      } else if (node.nodeName === '#comment') {\n        return serializeComment(node);\n      } else if (node.nodeName === '#cdata-section') {\n        return serializeCDATA(node);\n      }\n    }\n  };\n\n  return {\n    serializeToString: function (node) {\n      return removeInvalidCharacters(nodeTreeToXHTML(node, {\n        rootNode: true\n      }));\n    }\n  };\n});","map":{"version":3,"sources":["D:/act-back original/timetable_frontend/node_modules/xmlserializer/xmlserializer.js"],"names":["root","factory","define","amd","module","exports","xmlserializer","removeInvalidCharacters","content","replace","serializeAttributeValue","value","serializeTextContent","serializeAttribute","attr","name","getTagName","node","tagName","namespaceURI","toLowerCase","serializeNamespace","isRootNode","nodeHasXmlnsAttr","Array","prototype","map","call","attributes","attrs","indexOf","parentNode","serializeChildren","childNodes","childNode","nodeTreeToXHTML","join","serializeTag","output","forEach","length","serializeText","text","nodeValue","serializeComment","data","serializeCDATA","options","rootNode","nodeName","serializeToString"],"mappings":"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","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.xmlserializer = factory();\n    }\n}(this, function () {\n\n    var removeInvalidCharacters = function (content) {\n        // See http://www.w3.org/TR/xml/#NT-Char for valid XML 1.0 characters\n        return content.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/g, '');\n    };\n\n    var serializeAttributeValue = function (value) {\n        return value\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;');\n    };\n\n    var serializeTextContent = function (content) {\n        return content\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    };\n\n    var serializeAttribute = function (attr) {\n        var value = attr.value;\n\n        return ' ' + attr.name + '=\"' + serializeAttributeValue(value) + '\"';\n    };\n\n    var getTagName = function (node) {\n        var tagName = node.tagName;\n\n        // Aid in serializing of original HTML documents\n        if (node.namespaceURI === 'http://www.w3.org/1999/xhtml') {\n            tagName = tagName.toLowerCase();\n        }\n        return tagName;\n    };\n\n    var serializeNamespace = function (node, isRootNode) {\n        var nodeHasXmlnsAttr = Array.prototype.map.call(node.attributes || node.attrs, function (attr) {\n            return attr.name;\n        })\n                .indexOf('xmlns') >= 0;\n        // Serialize the namespace as an xmlns attribute whenever the element\n        // doesn't already have one and the inherited namespace does not match\n        // the element's namespace.\n        if (!nodeHasXmlnsAttr &&\n            (isRootNode ||\n             node.namespaceURI !== node.parentNode.namespaceURI)) {\n            return ' xmlns=\"' + node.namespaceURI + '\"';\n        } else {\n            return '';\n        }\n    };\n\n    var serializeChildren = function (node) {\n        return Array.prototype.map.call(node.childNodes, function (childNode) {\n            return nodeTreeToXHTML(childNode);\n        }).join('');\n    };\n\n    var serializeTag = function (node, isRootNode) {\n        var output = '<' + getTagName(node);\n        output += serializeNamespace(node, isRootNode);\n\n        Array.prototype.forEach.call(node.attributes || node.attrs, function (attr) {\n            output += serializeAttribute(attr);\n        });\n\n        if (node.childNodes.length > 0) {\n            output += '>';\n            output += serializeChildren(node);\n            output += '</' + getTagName(node) + '>';\n        } else {\n            output += '/>';\n        }\n        return output;\n    };\n\n    var serializeText = function (node) {\n        var text = node.nodeValue || node.value || '';\n        return serializeTextContent(text);\n    };\n\n    var serializeComment = function (node) {\n        return '<!--' +\n            node.data\n            .replace(/-/g, '&#45;') +\n            '-->';\n    };\n\n    var serializeCDATA = function (node) {\n        return '<![CDATA[' + node.nodeValue + ']]>';\n    };\n\n    var nodeTreeToXHTML = function (node, options) {\n        var isRootNode = options && options.rootNode;\n\n        if (node.nodeName === '#document' ||\n            node.nodeName === '#document-fragment') {\n            return serializeChildren(node);\n        } else {\n            if (node.tagName) {\n                return serializeTag(node, isRootNode);\n            } else if (node.nodeName === '#text') {\n                return serializeText(node);\n            } else if (node.nodeName === '#comment') {\n                return serializeComment(node);\n            } else if (node.nodeName === '#cdata-section') {\n                return serializeCDATA(node);\n            }\n        }\n    };\n\n    return {\n        serializeToString: function (node) {\n            return removeInvalidCharacters(nodeTreeToXHTML(node, {rootNode: true}));\n        }\n    };\n}));\n"]},"metadata":{},"sourceType":"script"}