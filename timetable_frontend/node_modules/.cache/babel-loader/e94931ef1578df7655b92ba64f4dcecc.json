{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdul\\\\Desktop\\\\AoAPro\\\\CS311S20PID25\\\\timetable_frontend\\\\src\\\\timeTableInput\\\\classrooms.jsx\";\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport SendIcon from '@material-ui/icons/Send';\nimport { toast } from \"react-toastify\"; // styling of input field\n\nconst CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: 'green'\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: 'green'\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: '#0f9ac4'\n      },\n      '&:hover fieldset': {\n        borderColor: '#202d42'\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: 'green'\n      }\n    }\n  }\n})(TextField);\n\nclass ClassRooms extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [{\n        name: \"\"\n      }],\n      //room array in state to save the result and handling input field\n      width: 0,\n      height: 0,\n      marginLeftTextField: 0,\n      buttonDisabled: true //handling button disable or enable with boolean\n\n    };\n\n    this.sumbitButtonCOnstraint = rooms => {\n      let count = 0;\n      rooms.map((room, i) => {\n        if (!room.name) {\n          count++;\n        }\n      });\n\n      if (count) {\n        this.setState({\n          buttonDisabled: true\n        });\n      } else {\n        this.setState({\n          buttonDisabled: false\n        });\n      }\n    };\n\n    this.checkUniqueArray = rooms => {\n      let singleArray = [];\n      rooms.map(room => {\n        singleArray.push(room.name);\n      });\n      let hasDuplicate = singleArray.some((val, i) => singleArray.indexOf(val) !== i);\n\n      if (hasDuplicate) {\n        this.setState({\n          buttonDisabled: true\n        });\n        toast.error(\"please enter unique name\");\n      }\n    };\n\n    this.checkEmptyField = rooms => {\n      let totalCounter = 0;\n      rooms.map((room, i) => {\n        let emptyCounter = 0;\n\n        for (let j = 0; j < room.name.length; j++) {\n          if (room.name[j] === \" \") {\n            console.log(\"true\");\n            emptyCounter++;\n          }\n        }\n\n        if (room.name.length === emptyCounter) {\n          totalCounter++;\n        }\n\n        console.log(\"map\", totalCounter);\n      });\n\n      if (totalCounter > 0) {\n        this.setState({\n          buttonDisabled: true\n        });\n        console.log(\"c\", totalCounter);\n      }\n    };\n\n    this.handleChange = (e, i) => {\n      const rooms = [...this.state.rooms];\n      rooms[i].name = e.target.value;\n      this.setState({\n        rooms\n      });\n      this.sumbitButtonCOnstraint(rooms); //checking that input feild should have value\n\n      this.checkUniqueArray(rooms); //cheking uniquness of input feild\n    };\n\n    this.addMoreField = () => {\n      const rooms = [...this.state.rooms, {\n        name: \"\"\n      }];\n      this.setState({\n        rooms\n      });\n      this.sumbitButtonCOnstraint(rooms); //disabling the submit button because here input feild will not have value\n    };\n\n    this.handleSubmit = () => {\n      const roomsArray = [];\n      const rooms = [...this.state.rooms]; //getting latest values from the state\n      // making rooms array of names that has been entered\n\n      rooms.map(room => {\n        let roomArray = [room.name, [[\"Monday\", 0, 0, 0, 0, 0, 0, 0, 0], [\"Tuesday\", 0, 0, 0, 0, 0, 0, 0, 0], [\"Wednesday\", 0, 0, 0, 0, 0, 0, 0, 0], [\"Thursday\", 0, 0, 0, 0, 0, 0, 0, 0], [\"Friday\", 0, 0, 0, 0, 0, 0, 0, 0]]];\n        roomsArray.push(roomArray);\n      }); // if input feild is empty mean room have no name, then removing it from rooms array\n\n      rooms.map((room, i) => {\n        if (!room.name) {\n          roomsArray.splice(i, 1);\n        }\n      });\n      this.props.onClassRooms(roomsArray); //calling function from parent component that is App and sending final result\n\n      this.props.history.push(\"/home/classes\"); //going to forward to next page by changing the url\n    };\n\n    this.handleRemove = i => {\n      const rooms = [...this.state.rooms];\n\n      if (rooms.length > 1) {\n        rooms.splice(i, 1);\n        this.setState({\n          rooms\n        });\n      } else {\n        toast.error(\"Enter the Name of Atleast one Room\");\n      }\n\n      this.sumbitButtonCOnstraint(rooms);\n    };\n\n    this.setMarginLeft = () => {\n      if (window.innerWidth <= 700) {\n        this.setState({\n          marginLeftTextField: 20\n        });\n      } else {\n        this.setState({\n          marginLeftTextField: 0\n        });\n      }\n    };\n\n    this.updateDimensions = i => {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n\n      if (i === 1) {\n        this.setMarginLeft();\n      }\n    };\n  }\n\n  // will be called when component mount this is to handle some styling by the size of application\n  componentDidMount() {\n    window.addEventListener('resize', () => this.updateDimensions(1)); //adding event listner of resize to detech the size change of application\n\n    this.setMarginLeft(); //calling function if size of application is changed\n  } //will be called when component will unmount\n\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', () => this.updateDimensions(0)); //removing listner\n\n    this.setMarginLeft(); //calling function if size of application is changed\n  } // ***** end_1 *****\n  // interface of this component\n\n\n  render() {\n    const {\n      rooms,\n      buttonDisabled\n    } = this.state; //geting values from state by object distructring syntax\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      row: true,\n      alignItems: \"center\",\n      item: true,\n      xs: 12,\n      style: {\n        marginTop: 60\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, rooms.map((room, i) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        key: i,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        item: true,\n        xs: 8,\n        style: {\n          marginTop: 20,\n          marginLeft: this.state.marginLeftTextField * -2\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        only: \"lg\",\n        container: true,\n        direction: \"row\",\n        justify: \"flex-end\",\n        alignItems: \"center\",\n        item: true,\n        sm: 7,\n        style: {\n          marginLeft: this.state.marginLeftTextField * 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => this.handleRemove(i),\n        style: {\n          backgroundColor: \"#0f9ac4\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 41\n        }\n      }, \"X\")), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"flex-end\",\n        alignItems: \"center\",\n        item: true,\n        sm: 5,\n        style: {\n          marginTop: -40\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(CssTextField, {\n        label: `Room-${i + 1} Name`,\n        variant: \"outlined\",\n        id: \"custom-css-outlined-input\",\n        value: room.name,\n        onChange: e => this.handleChange(e, i),\n        size: \"small\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 41\n        }\n      })));\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      item: true,\n      sm: 4,\n      style: {\n        marginTop: 20,\n        marginLeft: this.state.marginLeftTextField * 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        backgroundColor: \"#2a3547\",\n        color: \"#d0d6e0\"\n      },\n      onClick: this.addMoreField,\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, \"Add more\"))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      item: true,\n      xs: 12,\n      style: {\n        marginTop: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      style: {\n        backgroundColor: buttonDisabled ? \"#e0e0e0\" : '#2a3547',\n        color: buttonDisabled ? \"#c0cad8\" : \"#d0d6e0\"\n      },\n      endIcon: /*#__PURE__*/React.createElement(SendIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 34\n        }\n      }, \"send\"),\n      onClick: this.handleSubmit,\n      disabled: buttonDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }\n    }, \"Submit and Next\")));\n  }\n\n}\n\nexport default ClassRooms;","map":{"version":3,"sources":["C:/Users/abdul/Desktop/AoAPro/CS311S20PID25/timetable_frontend/src/timeTableInput/classrooms.jsx"],"names":["React","Component","withStyles","TextField","Button","Grid","SendIcon","toast","CssTextField","root","color","borderBottomColor","borderColor","ClassRooms","state","rooms","name","width","height","marginLeftTextField","buttonDisabled","sumbitButtonCOnstraint","count","map","room","i","setState","checkUniqueArray","singleArray","push","hasDuplicate","some","val","indexOf","error","checkEmptyField","totalCounter","emptyCounter","j","length","console","log","handleChange","e","target","value","addMoreField","handleSubmit","roomsArray","roomArray","splice","props","onClassRooms","history","handleRemove","setMarginLeft","window","innerWidth","updateDimensions","innerHeight","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","marginTop","marginLeft","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {toast} from \"react-toastify\";\r\n\r\n// styling of input field\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'green',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'green',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#0f9ac4',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#202d42',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: 'green',\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\n\r\nclass ClassRooms extends Component {\r\n\r\n    state = {\r\n        rooms: [{name: \"\"}],    //room array in state to save the result and handling input field\r\n        width: 0, height: 0,\r\n        marginLeftTextField: 0,\r\n        buttonDisabled: true     //handling button disable or enable with boolean\r\n    }\r\n\r\n    // handling submit button: disable button if input feild do not have value\r\n    sumbitButtonCOnstraint = (rooms) => {\r\n        let count = 0;\r\n        rooms.map((room, i) => {\r\n            if(!room.name){\r\n                count++;\r\n            }\r\n        })\r\n        if(count){\r\n            this.setState({buttonDisabled: true})\r\n        }else{\r\n            this.setState({buttonDisabled: false})\r\n        }\r\n    }\r\n\r\n    // checking that every input feild should have unique value\r\n    checkUniqueArray = (rooms) => {\r\n        let singleArray = [];\r\n        rooms.map(room => {\r\n            singleArray.push(room.name);\r\n        })\r\n        let hasDuplicate = singleArray.some((val, i) => singleArray.indexOf(val) !== i);\r\n        if(hasDuplicate){\r\n            this.setState({buttonDisabled: true})\r\n            toast.error(\"please enter unique name\");\r\n        }\r\n    }\r\n\r\n// handling the input fields with white space\r\n    checkEmptyField = (rooms) => {\r\n        let totalCounter = 0;\r\n        rooms.map((room, i) => {\r\n            let emptyCounter = 0;\r\n            for(let j = 0; j < room.name.length; j++){\r\n\r\n                if(room.name[j] === \" \"){\r\n                    console.log(\"true\");\r\n                    emptyCounter++;\r\n                }\r\n            }\r\n            if(room.name.length === emptyCounter){\r\n                \r\n                totalCounter++;\r\n            }\r\n            console.log(\"map\", totalCounter);\r\n\r\n        })\r\n\r\n\r\n        if(totalCounter > 0){           \r\n            this.setState({buttonDisabled: true})\r\n        console.log(\"c\",totalCounter);\r\n            \r\n        }\r\n    }\r\n\r\n    // handling change in input feild and update in rooms acordingly to show in input feild\r\n    handleChange = (e, i) => {\r\n        const rooms = [...this.state.rooms];\r\n        rooms[i].name = e.target.value;\r\n        this.setState({rooms})\r\n        \r\n\r\n        this.sumbitButtonCOnstraint(rooms)   //checking that input feild should have value\r\n\r\n        this.checkUniqueArray(rooms);    //cheking uniquness of input feild\r\n    }\r\n\r\n    // this function will add input feild if called\r\n    addMoreField = () => {\r\n        const rooms = [...this.state.rooms, {name: \"\"}]\r\n        this.setState({rooms})\r\n\r\n        this.sumbitButtonCOnstraint(rooms)  //disabling the submit button because here input feild will not have value\r\n    }\r\n\r\n    // this function will be called when submit button will be clicked\r\n    handleSubmit = () => {\r\n        const roomsArray = [];\r\n        const rooms = [...this.state.rooms];    //getting latest values from the state\r\n        \r\n         // making rooms array of names that has been entered\r\n        rooms.map(room => {\r\n            let roomArray = [room.name, [\r\n                [\"Monday\", 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [\"Tuesday\", 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [\"Wednesday\", 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [\"Thursday\", 0, 0, 0, 0, 0, 0, 0, 0],\r\n                [\"Friday\", 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ]];\r\n            roomsArray.push(roomArray);\r\n        })\r\n\r\n        // if input feild is empty mean room have no name, then removing it from rooms array\r\n        rooms.map((room, i) => {\r\n            if(!room.name){\r\n                roomsArray.splice(i, 1);\r\n            }\r\n        })\r\n\r\n        this.props.onClassRooms(roomsArray);    //calling function from parent component that is App and sending final result\r\n        this.props.history.push(\"/home/classes\");   //going to forward to next page by changing the url\r\n    }\r\n\r\n    // if input feild added by mistake with this function that can be removed by pressing the X button this function will be called\r\n    handleRemove = (i) => {\r\n        const rooms = [...this.state.rooms];\r\n\r\n        if(rooms.length > 1){\r\n            rooms.splice(i, 1);\r\n            this.setState({rooms});\r\n        }else{\r\n            toast.error(\"Enter the Name of Atleast one Room\")\r\n        }\r\n\r\n        this.sumbitButtonCOnstraint(rooms)\r\n    }\r\n\r\n\r\n// handling some styling that can be affected by the resizing of application   ***** start_1 ***** \r\n    setMarginLeft = () => {\r\n        if(window.innerWidth <= 700){\r\n            this.setState({marginLeftTextField: 20})\r\n        }else{\r\n            this.setState({marginLeftTextField: 0})\r\n        }\r\n    }\r\n\r\n    // updaing dimension if size of application is chanegs\r\n    updateDimensions = (i) => {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n        if(i === 1){\r\n            this.setMarginLeft();\r\n        }\r\n    };\r\n    // will be called when component mount this is to handle some styling by the size of application\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.updateDimensions(1));  //adding event listner of resize to detech the size change of application\r\n        this.setMarginLeft();   //calling function if size of application is changed\r\n    }\r\n    //will be called when component will unmount\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', () => this.updateDimensions(0));   //removing listner\r\n        this.setMarginLeft();   //calling function if size of application is changed\r\n    }\r\n\r\n                                                                             // ***** end_1 *****\r\n    \r\n    // interface of this component\r\n    render(){\r\n        const {rooms, buttonDisabled} = this.state; //geting values from state by object distructring syntax\r\n\r\n        return (\r\n            <form noValidate >\r\n                <Grid container row alignItems=\"center\" item xs={12} style={{marginTop: 60}}>\r\n                    \r\n                    {/* maping to rooms array to render all input feilds in rooms*/}\r\n                    {\r\n                        rooms.map((room, i) => {\r\n                            return (\r\n                                <Grid container key = {i} direction=\"column\" justify=\"center\" alignItems=\"center\" item xs={8} style={{marginTop: 20, marginLeft: this.state.marginLeftTextField * -2}}>  \r\n                                    <Grid only=\"lg\" container direction=\"row\" justify=\"flex-end\" alignItems=\"center\" item sm={7} style={{marginLeft: this.state.marginLeftTextField * 8}} >                                  \r\n                                        {/* to remove the input feild by passing the index of feild */}\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick = {() => this.handleRemove(i)}\r\n                                            style={{backgroundColor: \"#0f9ac4\"}}\r\n                                        >\r\n                                            X\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"center\" item sm={5} style={{marginTop: -40}}>                                    \r\n                                        {/* input feilds here calling the handleChange method to handle input value*/}\r\n                                        <CssTextField\r\n                                            label = {`Room-${i+1} Name`}\r\n                                            variant = \"outlined\"\r\n                                            id = \"custom-css-outlined-input\"\r\n                                            value = {room.name}\r\n                                            onChange = {(e) => this.handleChange(e, i)}\r\n                                            size=\"small\"\r\n                                            fullWidth\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            );\r\n                        })\r\n                    }\r\n                         <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"flex-start\" \r\n                            item sm={4}\r\n                            style={{marginTop: 20, marginLeft: this.state.marginLeftTextField * 2}}\r\n                        >\r\n                            {/* butto to add more feilds by calling the addMoreFeild method */}\r\n                        <Button style={{backgroundColor: \"#2a3547\", color: \"#d0d6e0\"}} onClick={this.addMoreField} variant=\"contained\">\r\n                            Add more\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\" \r\n                    item xs={12}\r\n                    style={{ marginTop: 40}}\r\n                >\r\n                     {/* submit button to submit current feilds and to go to next step */}\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        style={{backgroundColor: buttonDisabled ? \"#e0e0e0\":'#2a3547', color: buttonDisabled ? \"#c0cad8\" : \"#d0d6e0\"}}\r\n                        endIcon={<SendIcon>send</SendIcon>}\r\n                        onClick = {this.handleSubmit}\r\n                        disabled = {buttonDisabled}\r\n                    >\r\n                        Submit and Next\r\n                    </Button>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClassRooms;"]},"metadata":{},"sourceType":"module"}